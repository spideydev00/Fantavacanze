import java.util.Properties
import java.io.FileInputStream

plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    // END: FlutterFire Configuration
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

// Definisce le variabili per caricare il file delle chiavi
def keystoreProperties = new java.util.Properties()
def keystorePropertiesFile = rootProject.file("key.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new java.io.FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.spideyDev.fantavacanze"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = "28.1.13356709"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    defaultConfig {
        applicationId = "com.spideyDev.fantavacanze"
        minSdkVersion = 24
        targetSdkVersion = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
        resConfigs "it", "en"
    }

    // Configurazione per la firma dell'app in release
    signingConfigs {
        create("release") {
            keyAlias = keystoreProperties['keyAlias'] as String
            keyPassword = keystoreProperties['keyPassword'] as String
            storePassword = keystoreProperties['storePassword'] as String
            // Conversione da Kotlin .let a Groovy if
            def storeFilePath = keystoreProperties['storeFile']
            if (storeFilePath != null) {
                storeFile = project.file(storeFilePath)
            }
        }
    }

    buildTypes {
        debug {
          applicationIdSuffix ".debug"
        }
        release {
            // Usa la configurazione di firma "release" per la build di release
            signingConfig = signingConfigs.getByName("release")
        }
    }
}

dependencies {
  // utilizza il BOM: gestisce tutte le versioni Firebase in blocco
  implementation platform('com.google.firebase:firebase-bom:31.2.0')
  implementation 'com.google.firebase:firebase-analytics-ktx'
  implementation 'com.google.android.play:integrity:1.4.0'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

flutter {
    source = "../.."
}